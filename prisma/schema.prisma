// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  firstName      String?
  lastName       String?
  email          String?    @unique
  emailVerified  DateTime?
  cpf            String?
  image          String?
  createdAt      DateTime   @default(now())
  hashedPassword String?
  updatedAt      DateTime   @default(now())
  credits        Decimal    @default(0) @db.Decimal(5, 2)
  accounts       Account[]
  sessions       Session[]
  contracts      Contract[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bill {
  id             String   @id @default(uuid())
  price          Decimal  @db.Decimal(5, 2)
  discount       Decimal  @default(0) @db.Decimal(5, 2)
  contractNumber String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Contract {
  id             String      @id @default(uuid())
  userId         String
  contractNumber String      @unique
  address        String
  type           TypeAddress @default(OTHER)
  isValid        Boolean     @default(false)
  user           User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum TypeAddress {
  HOUSE
  APARTMENT
  OTHER
}
